pipeline {
    agent {
        kubernetes {
            yaml '''
apiVersion: v1
kind: Pod
spec:
  containers:
  - name: git
    image: alpine/git:latest
    command:
    - sleep
    args:
    - infinity
  - name: python
    image: python:3.9-slim
    command:
    - sleep
    args:
    - infinity
  - name: docker
    image: docker:latest
    command:
    - sleep
    args:
    - infinity
    volumeMounts:
    - name: docker-sock
      mountPath: /var/run/docker.sock
    securityContext:
      privileged: true
  volumes:
  - name: docker-sock
    hostPath:
      path: /var/run/docker.sock
'''
        }
    }
    
    environment {
        DOCKERHUB_CREDENTIALS = credentials('dockerhub-credentials-id')
    }
    
    stages {
        stage('Clone Repository') {
            steps {
                container('git') {
                    git url: 'https://github.com/pratiks-git/my-jenkins.git', branch: 'main'
                }
            }
        }
        
        stage('Setup Environment') {
            steps {
                container('python') {
                    sh '''
                        cd flask-app
                        python3 -m venv .venv
                        . .venv/bin/activate
                        pip install --upgrade pip
                        pip install flask pytest
                        pip freeze > requirements.txt
                        pip install -r requirements.txt
                        pip install -e .
                    '''
                }
            }
        }
        
        stage('Run Unit Tests') {
            steps {
                container('python') {
                    sh '''
                        cd flask-app
                        . .venv/bin/activate
                        pytest
                    '''
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                container('docker') {
                    sh '''
                        cd flask-app
                        docker build -t flaskr:latest .
                    '''
                }
            }
        }
        
        stage('Push Docker Image') {
            steps {
                container('docker') {
                    sh '''
                        echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin
                        docker tag flaskr:latest $DOCKERHUB_CREDENTIALS_USR/flaskr:latest
                        docker push $DOCKERHUB_CREDENTIALS_USR/flaskr:latest
                    '''
                }
            }
        }
        
        stage('Deploy Application') {
            steps {
                container('docker') {
                    sh '''
                        docker stop flaskr || true
                        docker rm flaskr || true
                        docker run -d --name flaskr -p 5000:5000 flaskr:latest
                    '''
                }
            }
        }
    }
    
}